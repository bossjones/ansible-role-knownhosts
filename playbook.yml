---
# sudo ansible-playbook -i "localhost," -c local playbook.yml
# sudo ansible-playbook -i "localhost," -c local playbook.yml --extra-vars="bossjones__knownhosts__user=$(whoami)"
# sudo ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook.yml --extra-vars="bossjones__knownhosts__user=$(whoami)"
# - hosts: localhost
#   connection: local
#   become: true
#   roles:
#     - ../ansible-role-knownhosts

# SOURCE: Inspiration - https://github.com/jan-warchol/ansible-workstation-setup/blob/a7bc1045882a4ab1cc35530083cd10db74c901dd/cli-setup-secrets.yml

- name: get information about ansible control machine
  hosts: localhost
  connection: local
  become: true
  gather_facts: yes



- name: setup password store
  # hosts: all
  hosts: localhost
  connection: local

  vars:
    pass_gpg_key_fingerprint: "EC5E 11DD EF42 BF79 FBFA 4F4E FF6A DDEB B33A 5D2F"
    key_filename: "GPG_key_{{ pass_gpg_key_fingerprint | replace(' ', '') }}.asc"
    control_machine_ip: "{{ hostvars['localhost'].ansible_default_ipv4.address }}"
    hide_sensitive_logs: false

  roles:
    - known-hosts
    - ../ansible-role-knownhosts

  tasks:

    - name: install apt packages
      apt:
        name:
          - expect  # for automatic ssh key unlocking
          - gnupg2  # I want to be able to use gpg2 command for compatibility
          - git
          - xclip  # for putting password in clipboard
          - pinentry-tty  # for unlocking keys in agent without gui
          - pwgen  # password generator
      become: yes

    - name: ensure directories exist
      file:
        dest: "{{ ansible_env.HOME }}/{{ item }}"
        state: directory
        mode: 0700
      loop:
        - .ssh
        - .ssh/keys
        - .gnupg

    - name: copy personal ssh key
      copy:
        dest: "{{ ansible_env.HOME }}/.ssh/keys/id_rsa_personal_2c6819cb"
        content: "{{ lookup('knownhosts', 'ssh-keys/id_rsa_personal_2c6819cb returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"

    - name: copy personal public key
      copy:
        dest: "{{ ansible_env.HOME }}/.ssh/keys/id_rsa_personal_2c6819cb.pub"
        content: "{{ lookup('knownhosts', 'ssh-keys/id_rsa_personal_2c6819cb.pub returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"

    - name: copy codility ssh key
      copy:
        dest: "{{ ansible_env.HOME }}/.ssh/keys/id_rsa_codility_3"
        content: "{{ lookup('knownhosts', 'ssh-keys/id_rsa_codility_3 returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"

    - name: copy codility public key
      copy:
        dest: "{{ ansible_env.HOME }}/.ssh/keys/id_rsa_codility_3.pub"
        content: "{{ lookup('knownhosts', 'ssh-keys/id_rsa_codility_3.pub returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"

    - name: copy codility ssh key 4
      copy:
        dest: "{{ ansible_env.HOME }}/.ssh/keys/id_ed25519_codility_4"
        content: "{{ lookup('knownhosts', 'ssh-keys/id_ed25519_codility_4 returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"

    - name: copy codility public key 4
      copy:
        dest: "{{ ansible_env.HOME }}/.ssh/keys/id_ed25519_codility_4.pub"
        content: "{{ lookup('knownhosts', 'ssh-keys/id_ed25519_codility_4.pub returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"

    - name: copy GPG key for password store
      copy:
        dest: "{{ ansible_env.HOME }}/.gnupg/{{ key_filename }}"
        content: "{{ lookup('knownhosts', 'personal-gpg-key returnall=true') }}"
        mode: 0600
      no_log: "{{ hide_sensitive_logs }}"
      register: gpg_key_status

    - name: import gpg key
      command: gpg2 --batch --import {{ ansible_env.HOME }}/.gnupg/{{ key_filename }}
      when: gpg_key_status.changed

    - name: copy GPG trust database so that keys are trusted
      copy:
        # note that in src we want the HOME of ansible controller user
        src: "{{ lookup('env', 'HOME') }}/.gnupg/trustdb.gpg"
        dest: "{{ ansible_env.HOME }}/.gnupg/trustdb.gpg"
        mode: 0600

    - name: clone password store
      git:
        repo: git@bitbucket.org:jan-warchol/password-store.git
        dest: "{{ knownhosts_path }}"
        update: no
        recursive: no  # "offline" module requires special steps
        key_file: "{{ ansible_env.HOME }}/.ssh/keys/id_rsa_personal_2c6819cb"

    - name: configure git user email
      git_config:
        name: user.email
        value: jan.warchol@gmail.com
        path: "{{ knownhosts_path }}"

    - name: clone special submodule with top-secret passwords
      git:
        accept_hostkey: yes  # low risk since it's over LAN
        # FIXME: knownhosts_path should be taken from control machine hostvars
        repo: jan@{{ control_machine_ip}}:{{ knownhosts_path }}/offline
        dest: "{{ knownhosts_path }}/offline"
        key_file: "{{ ansible_env.HOME }}/.ssh/keys/id_rsa_personal_2c6819cb"

    - name: add link to codility SSH configuration
      file:
        state: link
        path: "{{ ansible_env.HOME }}/.ssh/config_codility"
        src: "{{ knownhosts_path }}/ssh_config_codility"
